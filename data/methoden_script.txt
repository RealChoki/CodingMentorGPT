Grundlagen der Programmierung - Methoden (Teil I)

Heute beschäftigen wir uns mit dem Thema Methoden in Java.

Die Motivation dieses Videos ist, erstens, was ist eine Methode und zweitens, wie definiere ich eine Methode mit und ohne Parameter? Die grundlegende Idee von einer Methode ist, dass man wiederkehrende Funktionalitäten nicht immer wieder neu programmieren sollte. Stattdessen sollte man die Funktionalität einmal in einer sogenannten Methode kapseln. So kann man ein komplexes Programm in kleinere Teilprogramme zerlegen. Möchte ich die Funktionalitäten nutzen, die ich in einer Methode gekapselt habe, so wird die Methode aufgerufen.

Dazu mehr im nächsten Video. Hier mal ein Beispiel für eine Kreisflächenberechnung in der Main Methode. Wir sehen, wir haben hier diesen Codeabschnitt und diesen Codeabschnitt und tatsächlich sind diese Codeabschnitte identisch bis auf den Wert des Radius. Das Problem, was wir hier sehen, ist, dass wir wiederkehrende Funktionalität haben und redundanten Code. Wollen wir beispielsweise die Ausgabe auf der Konsole abändern und das für alle Ausgaben, wenn ich eine Fläche berechne, dann müsste ich das in jedem Codeabschnitt in einem Programm ändern. Ist ein Programm sehr komplex und auch umfangreich, kann es sehr schnell zu Fehlern führen, weil ich eben vielleicht nicht alle Stellen finde, vielleicht auch nicht gleichmäßig bearbeite. Und die Idee von gutem Code oder sogenannten Clean Code ist, dass ich Funktionalität tatsächlich nur einmal umsetze.

Hier eben auch schon die Lösung. Den Code auslagern in einer sogenannten Methode, das heißt genau diesen Teil hier, den wird ich in eine Methode auslagern und den Radius würde ich als Parameter übergeben, das heißt, das einzige, was sich ändert, ist tatsächlich der Wert, der dann später hier eingesetzt wird. Wie sieht eine Methode in Java aus? Hier ist eine Methode, die wir bereits kennen, nämlich die sogenannte Main Methode. Und wir wollen jetzt mal durch die einzelnen Bestandteile dieser Methode gehen. Als erstes ist die Sichtbarkeit der Methode zu nennen. Wir haben jetzt erst mal angefangen, alle Methoden public zu setzen, das heißt, sie sind öffentlich von außen zugreifbar, was von außerhalb oder von außen bedeutet, das werden wir noch später in der Vorlesung klären.

Der Vollständigkeitsheil war gibt es auch noch die Sichtbarkeit in protected, private und default, also mit keinem Modifizierer, dann ist das ein sogenanntes Package Private. Der zweite Teil, sogenannte Static, gibt an, ob es sich um eine statische oder um eine nicht statische Methode handelt. Wenn es eine statische Methode ist, dann kann die Methode aufgerufen werden, ohne vorher ein Objekt zu erzeugen. Objekte kennen wir aber noch nicht.

Objekte lernen wir erst mit der Objektorientierung kennen. Das heißt, jetzt in der nächsten Zeit werden wir immer mit statischen Methoden arbeiten. Dementsprechend ist auch das Schlüsselwort Static hier sehr wichtig. Der dritte Teil hier oben in diesem sogenannten Methoden Kopf ist der Rückgabetyp. Der Rückgabetyp legt fest, welchen Datentyp die Methode zurückgibt. Das kann ein primitiver Datentyp sein, wie beispielsweise ein Int, ein Boolean oder ein Double. Es kann aber eben auch ein Referenz Datentyp sein.

Hier haben wir bisher nur Strings kennen gelernt. Eine Methode, wo hier ein Wort steht, bedeutet, dass die Methode keinen Rückgabewert hat. Zur Rückgabewerten kommen wir später noch. Der vierte Teil, den wir uns angucken oder das vierte Element, ist der Methoden Name. Der Name ist ganz wesentlich für die Methode, denn sie identifiziert die Methode. Und wenn ich die Methode später aufrufen möchte, dann tu ich dies mithilfe des Namens.

In Java folgen wir in der Namenskonvention, indem wir erstens möglichst sprechende Bezeichnungen benutzen. Also nicht sagen Methode 1, 2 und 3, sondern zum Beispiel berechne Mehrwertsteuer oder Formatäre, Konsolen, Ausgabe und so weiter und so fort. Also etwas, wo ich herauslesen kann, was die Methode macht.

Am besten auch eben mit einem Verb und einem Substantiv zusammengesetzt. Und wir schreiben das Ganze in einem sogenannten Lower Camel Case. Das heißt, wir fangen mit einem Kleinbuchstaben an.

Und wenn wir jetzt zum Beispiel das Wort zusammensetzen und jetzt ein nächstes Wort kommt, dann wird das mit einem sogenannten oder wird es mit einem Großbuchstaben begonnen. Und dann hat man sogenannten Camel Case, also diese Camelhörker. Und so würde man gemäß Java-Konsumensionen Methoden Namen anlegen. So, dann haben wir noch diese runden Klammern, die sind jetzt hier nicht farblich markiert, die immer Teil der Methode sind und innerhalb dieser runden Klammern stehen 0 bis n Parameter. Das heißt, die Elemente, die sich in der Methode ändern können oder beziehungsweise hier gebe ich dann Werte rein. Und zur Laufzeit, das heißt, wenn ich die Methode nachher benutzen möchte, wenn ich sie aufrufe, wird hier ein entsprechender Wert reingegeben.

Wir erinnern uns an unserem Beispiel von eben. Da hatten wir ein Radius von 4.2 und ein Radius von 5.2. Und je nachdem, wie ich das jetzt berechnen wollte, also für welchen Radius würde ich hier diesen entsprechenden Wert reingeben. Parameter sind entsprechend sozusagen hier Platzhalter. Und diese sind innerhalb von der Methode sichtbar. Das hier, diese eckigen Klammern, das lernen wir noch später kennen.

Das hier ist ein sogenanntes String Array und das ist der variablen Name. Wer sich wundert, wofür das steht, das sind die Arguments. Das ist, wie gesagt, sieht nur in der Main Methode jetzt tatsächlich so aus. Und mit diesen Parametern könnte ich jetzt auch oder kann ich und das werden wir nachher auch tun, in der Methode arbeiten. Wenn man das Ganze nochmal so ein bisschen mehr unterteilt, diese Teile, die wir uns zuerst angeschaut haben, das nennt man den sogenannten Methode in Kopf. Also alles, was hier grün dargestellt ist, die Sichtbarkeit ist es statischer, nicht statisch. Ist es die, welchen Rückgabentyp haben wir, den Namen und die Parameterliste. Und was hier lila eingezeichnet ist, das ist der sogenannte Methodenrumpf. Hier ist dann die tatsächliche Funktionalität enthalten.



Grundlagen der Programmierung - Rückgabewerte und Methodenaufruf

Herzlich willkommen zurück. Heute wollen wir uns Teil 2 von Methoden anschauen und zwar Rückgabewerte und den Methodenaufruf. Die Motivation des Videos ist zum einen, was ist der Rückgabewerteinnahm-Methode und zweitens, wie rufe ich eine Methode auf.

Uns ist Recap. Methoden kapseln Funktionalitäten, sodass man Programmcode wieder verwenden kann. Das heißt, man schreibt Funktionalitäten nicht mehrere Male, um Rendendansen zu vermeiden. Die veränderlichen Anteile werden in Form von Parametern übergeben. Eine Methode besteht aus einem Methodenkopf und einem Methodenrumf. Der Methodenkopf umfasst die Sichtbarkeit wie Public, Private, Statisch oder nicht Statisch in Form des Keywords Static, den Rückgabendatentyp, den Namen der Methode und die Parameterleste.

Der Methodenrumf beinhaltet die Funktionalität. Methoden können ja war genau einen oder keinen Wert zurückgeben. Wir haben hier unten mal drei Beispiele angegeben. Diese Methode hier, wir kennen hier dem, das ist ja, wir wissen der Methodenkopf, hier der Methodenrumf, ist eine Public Methode. Sie gibt einen Bullschenwert zurück. Ihr Name, der Methodenname heißt ist Ott. Wir sehen, dass es keine Statischen Methode ist, aber jetzt erstmal unerheblich. Und wir haben einen Parameter, nämlich ein In-Parameter mit dem Bezeichner nr. So, und hier wird eben angegeben, dass wir einen Bullschenwert als Rückgabe haben. Und was immer ganz wichtig ist, wenn man einen Rückgabe wert hat, dann hat man auch irgendwo in Impff-Methodenrumf ein sogenanntes Return Statement.

Also dieses Keywort drin, return. In diesem Fall ist es hier, return nr, also das, was hier reingegeben wurde, Modulo 2, gleich gleich 1. Das heißt, dieser ganze Wert wird ausgewertet und ein Bullscherwert wird aus der Methode zurückgegeben. Hier mal ein Beispiel für ein Int, der zurückgegeben wird. Hier ist eine Static Methode.

Was macht die Static Methode? Naja, sie multipliziert zwei Eingabewert, nämlich den Eingabewert a und b, die beide inst sind. Und von der Berechnung her sieht es dann so aus, hier wird a mal b gerechnet und dieser Wert wird dann zurückgegeben. So, das waren zwei Dinge mit Rückgabe. Kann man sich gut merken mit rr und dann brauche ich auch ein return, also das könnte eine Isles Brücke sein. Und dann habe ich hier noch eine Methode ohne Rückgabewert. Das wäre jetzt eine Methode, das wird immer gekennzeitet. Ich habe immer einen Reut, wenn ich keine Rückgabewert habe.

Und was macht diese Methode? Die heißt erst mal lockstudent und ich habe zwei Parameter, nämlich ein String, den ich mit Name bezeichne und ein Int mit Semester. Und jetzt wird etwas auf der Konsole ausgegeben. Das auch kann man sich auch gut als Isles Brücke merken, System Out und Ausgabe. Genau, und jetzt wären quasi die Werte aus diesen Parametern auf der Konsole ausgegeben.

Man könnte das Beides jetzt auch kombinieren. Jetzt könnte zum Beispiel so eine Methode, die einen Rückgabewert hat, also return hat, könnte danach oder davor, danach geht nicht, return muss immer das letzte Statement sein. Aber davor könnte sie auch eine Ausgabe haben. Aber wichtig ist, wenn ich kein return habe, dann habe ich auch keinen Rückgabewert. Gut, was wir bisher gemacht haben, ist immer, dass wir Methoden definiert haben. Also festgelegt haben, was soll die Methode tun? Hier noch mal eine kurze Zusammenfassung, wenn ich mir das ganze anschaue.

Wie gesagt, hier mein modifizierer Sichtbarkeitsstätik haben wir jetzt hier nicht drin. Ich habe ein int als Rückgabewert und meine Methode heißt sum up int und ich bekomme zwei Parameter reingegeben, int a und int b und ich gebe zurück die Summe von a und b. Das macht meine Methode. Genau, also was soll die Methode tun? Welche Funktionalität bietet sie an? Das ist die sogenannte Definition.

Was ich zur Methode definieren natürlich noch nicht weiß, ist welchen Wert hat a und welchen Wert hat b? Das beides hier sind nur Platzhalter. Das heißt, ich muss mal grundsätzlich vorstellen, okay zur Laufzeit, also später, wenn die Methode aufgerufen wird, werden hier Zahlen eingesetzt.

Aber welche Zahlen das genau sind, das weiß ich im Moment noch nicht. Das heißt, ich arbeite hier mit Platzhaltern, mit Symbolen, um zu sagen, welche Funktionalität wird hier realisiert. Hier nochmal diese Zusammenfassung, Definition, nicht statische Methode und so weiter und so fort. Methodenrumpf enthält eigentlich Berechnung.

Jetzt, wie geht es weiter? Wenn ich jetzt diese Methode mit tatsächlichen Werten aufrufen möchte, ja, dann muss ich diese Methode mithilfe ihres Namens aufrufen. Und beim Aufruf der Methode über den Namen, muss ich statt dieser Parameterwerte, also a und b, nicht Parameterwerte, sondern anstatt dieser Symbole echte Werte einsetzen.

Schauen wir uns das mal an. Also ich könnte jetzt Teil vom Code haben, indem ich eine Variable anlege, eben x und in y und was ich jetzt machen könnte, ich könnte diese Methode aufrufen, Samm ab ins, indem ich einfach ihren Namen hinschreibe und zum Beispiel hier in Klammern x und y, das ist schon ein bisschen schwierigere Version. Eingäbe, hier würde jetzt eingesetzt, x gleich eins, y gleich zwei, würde hier entsprechend die Methode eingesetzt werden, dann würde diese Methode des Beis zusammenrechnen, eins plus zwei ergibt drei und das im Result eins speichern. Und ähnlich sehen wir das hier unten. Da ist es natürlich auch so, hier rufe ich die Methode auf, Samm ab ins. Hier kann ich natürlich auch direkten Wert reinschreiben, also ich muss das nicht über Variablen machen und hier habe ich die 123 und x, x ist eins, ich addiere das Beides zusammen und komme zur 124.

Ganz wichtig bei den Übergabe-Parametern ist, dass wenn ich mehrere Übergabe-Parameter habe, muss ich ganz strikt auf die Reihenfolge achten, also ich muss exakt der Reihenfolge der Methode Definitionen entsprechen. Wenn ich jetzt zum Beispiel hier zwei Strings eingebe und ich hätte zum Beispiel den String Julia und Business Informatics, dann muss Julia als erstes kommen und Business Informatics als zweites. Dann würde nämlich auch das Richtige rauskommen, nämlich Julia Studies Business Informatics. Würde ich das jetzt vertauschen, weil ich nicht darauf geachtet habe, zum Beispiel Business Informatics gleich Name und Major wäre Julia, dann hätte ich nachher diese falsche Reihenfolge, das hier steht, Business Informatics Studies Julia.



Grundlagen der Programmierung - Methoden Demo

So, ich habe da mal ein kleines VPL vorbereitet. Sie sehen hier oben wieder die MainMethode. Die benötigen wir tatsächlich immer, damit wir etwas ausführen können. Und ich habe hier mal zwei Kommentare hinterlegt. Die werden wir jetzt mal Schritt für Schritt abarbeiten. Und zwar möchten wir jetzt heute zwei Methoden schreiben.

Die erste Methode, die wir schreiben wollen, ist eine Methode, welche zwei ganz zahlige Werte int als Eingabe nimmt, das heißt, zwei Parameter hat vom Datentyp int. Diese addiert und die Summe zurückgibt. So, wie sieht das aus? Wie schreiben wir also unsere Methode? Wir schreiben jetzt immer mal Public Methoden, Public Sichtbarkeit.

Dann, was wir zur Zeit auch immer machen, ist, dass wir statische Methoden schreiben. Es wird sich später nochmal ändern. Aber jetzt erstmal können Sie sich darauf fokussieren. Wir benutzen mal Public Static. Jetzt kommt der Punkt, dass unsere Methode etwas zurückgibt. Das heißt, wir werden einen Return haben. Was man jetzt machen kann, ist, wenn wir noch nicht genau wissen, was das für ein Datentyp hat, das wir es mal einfach mal weglassen und das gleich einsetzen.

So, und dann müssen wir uns überlegen, wie heißt unsere Methode? Ich würde Sie jetzt einfach mal add int nennen. So, und hat zwei ganz zahlige Werte als Eingabe, also int a und int b. So, das ist unser Methodenkopf. Wie gesagt, noch nicht ganz fertig. Da fehlt ja noch was. Nämlich der Rückgabentyp.

So, und was macht unsere Methode? Die soll a und b addieren und die Summe zurückgeben. So, und wir wissen, wenn wir zwei ints addieren, dann bekommen wir auch wieder ein int zurück. So, und wir können jetzt hier einen Return c schreiben, also c wird zurückgegeben. Das ist die Summe von a und b. Und jetzt wissen wir auch, wie ist unser Rückgabendatentyp und zwar ist das ein int.

Und damit ist die Methode vollständig. So, was ich jetzt natürlich hier noch nicht sehe, ist, ich kann sie mir jetzt nicht, ich kann jetzt nicht ausführen. Also wenn ich jetzt hier was ausführe, passiert nichts. Ich habe ja auch noch nichts in der Main Methode stehen. Meine Methode hier, die ist jetzt im Moment noch ganz passiv. Das heißt, wenn ich mit der was machen möchte, muss ich sie aufrufen.

Wie mache ich das, indem ich sie über ihren Namen aufrufe? Und ich sage, sie sollen mir mal zwei Werte addieren und zwar den Wert 7 und 5. So, jetzt kann ich das Ganze mal ausführen. und sehe tatsächlich, ich sehe nichts, liegt daran, ich habe zwar die Methode ausgeführt, aber hier steht ja nirgends so etwas davon, dass es auf der Konsole ausgegeben werden soll. Das heißt, ich könnte hingehen und sagen, der Wert der hier rauskommt, ich weiß ja genau, dass das ein Int ist, also ich könnte sagen, Int Ergebnis ist gleich dieser Methodenaufruf und dann könnte ich hingehen und sagen, und wenn du diesen Methodenaufruf gemacht hast, dann schreibt mir doch mal das Ergebnis, was rauskommt auf die Konsole und das machen wir jetzt mal. Sieht dann wie folgt aus, hier Ergebnis ist genau das, was ich bekomme, wenn ich Add ins 7 und 5 aufrufe.

Ich speichere das mal, ich führ das einmal aus und ich sehe, da ist die 12, das ist mein Ergebnis. So, haben wir gesehen Methode mit Rückgabewert, dann steht hier immer ein Rückgabewert und hier steht ans zum Schluss immer ein Return, nämlich der Return gibt an, dass etwas zurückgegeben wird. So, gucken wir uns mal den zweiten Teil an, eine Methode, welche ein Text als Eingabe nimmt und ihn auf der Konsole ausgibt. Sehr schön, fangen wir mal wieder an, Public Static, Rückgabewert, wir gucken uns das genau an, hier steht, der wird auf der Konsole ausgegeben, hier wird nicht von einer Rückgabe gesprochen, das heißt, wir haben keinen Rückgabewert und das ist ein Void.

So, und ich habe einen String als Eingabe, das heißt, ein String Text ist mein Parameter. So, was soll die Methode machen? Sie soll das ganz auf der Konsole ausgeben, das heißt, ich mache mal eine Konsolausgabe. So, und was kommt dann jetzt hier rein? Klar, jetzt kommt hier der Text rein, den ich als Parameter reinbekommen habe, also genau dieser Text hier der Parameter ist. So, hier ist es so, die ist jetzt erstmal ganz passiv, wenn ich sie, wenn ich sehen möchte, was sie tut, dann muss ich sie aufrufen. So, das kann ich jetzt hier einfach mal machen, ich sage Print Text und jetzt schreibe ich hier einfach mal Hallo Welt rein und was jetzt hier zum Beispiel auch der Unterschied ist, wir sehen, wenn ich diese Methode aufrufe, dann geht es quasi hier, also wird diese Methode hier aufgerufen, ausgeführt, Hallo Welt wird hier als String eingesetzt und der Text wird auf der Konsole ausgegeben. In dieser Methode hier habe ich zum Beispiel keine Konsolausgabe, das heißt, ich muss mir extra nochmal eine bauen, wenn ich das Ganze sehen möchte. So, jetzt testen wir das auch nochmal, ich füße einmal aus und jetzt sehe ich hier Hallo Welt und damit ist meine Methode vollständig und tut genau das, was sie machen soll.



Grundlagen der Programmierung - Kommentare

Willkommen zurück. Heute wollen wir uns Kommentare in Java anschauen. Motivation dieses Videos ist, welche Dokumentationsformen gibt es in Java und wann und wie werden diese eingesetzt.

Erstmal die Frage, warum benötigen wir Dokumentation. Das Dokumentieren von Softwaresystem ist wichtig. Wenn ich Software entwickel, dann habe ich vielleicht spezifische Gedankengänge, habe Methoden geschrieben, habe umfangreiche Klassen vielleicht geschrieben. Und diese sollte ich entsprechend dokumentieren. Das ist teilweise sehr zeitintensiv und wird daher oft vernachlässigt. Wenn man sich aber später diesen Code anschaut und der Code nicht unbedingt dokumentiert ist, dann kann es sein, dass er schwer zu verstehen ist. Grundsätzlich würde man sagen, dass man oder heutzutage sagt man, dass man Code so schreiben sollte, dass er selbst, also sich, dass er selbst erklärend ist, dokumentieren hilft aber dennoch. Die Wiederverwertung wird angestrebt. Das heißt, wenn ich weiß, was spezifische Teile machen, dann kann ich die natürlich auch weiterhin benutzen. Und Schnittstellen, dazu kommen wir später in der Vorlesung, sollten ebenfalls sorgfältig beschrieben werden, was über diese Schnittstellen realisiert werden soll.

Kommentare in Java dienen zur Beschreibung von Methoden, Strukturen und so weiter und so fort. Die Kommentare können dafür eingesetzt werden, dass Code für Außenstehende verständlicher ist. Code wird öfters gelesen als geschrieben, denn wenn ein Code einmal existiert und funktioniert, dann kann es natürlich sein, dass man diesen erweitert und so weiter und so fort. Das heißt, er wird nicht immer wieder neu geschrieben, aber man muss verstehen, was Code oder existierender Code macht. Das hilft natürlich dann auch, Fehler einfacher zu finden. Und man muss sagen für Kommentare, diese sollten kurz und prägnant sein, aber alle relevanten Informationen enthalten. Eine schöne Sache ist natürlich, oder was heißt schön, aber Kommentare wären vom Compiler ignoriert.

Das heißt, wenn ich beispielsweise auch Teile in meinem Code habe, die jetzt noch nicht so ganz funktionieren oder so was, dann könnte ich die erst mal auskommentieren, dann kann ich mein Programm weiterhin ausführen, gerade jetzt am Anfang. Und genau, und die Kommentare werden jetzt nicht als Fehler angezeigt. In Java haben wir drei Arten von Kommentaren, zum einen sogenannte einzeilige Kommentare, wo ich etwas auskommentieren kann, was quasi in einer Zeile steht. Dann gibt es Blockkommentare, die über mehrere Zeilen gehen. Und dann gibt es sogenannte Dokumentationskommentare, Java-Doc. Man sieht hier an diesem Beispiel, die sehen sehr ähnlich aus.

Also ein Blockkommentar beginnt mit so einem Slash-Sternchen und ein Java-Doc, ein Dokumentationskommentar beginnt mit einem Slash-Sternchen-Sternchen. Da besteht wirklich auch ein Unterschied. Dieses Video fokussiert jetzt erstmal grundsätzlich auf Kommentare. Wir werden uns im nächsten Video auch das Thema Java-Doc genauer anschauen. Und jetzt gibt es erstmal eine kleine Demo.

So, ich habe hier wieder was Kleines vorbereitet. Das kennen Sie ja wahrscheinlich noch aus dem letzten Video oder eines der letzten Video, als wir uns mit Methoden beschäftigt haben. Und was wir uns jetzt mal anschauen wollten, sind erstmal die ersten zwei Arten von Kommentaren.

Im nächsten Video gibt es dann die sogenannten Dokumentationskommentare, die Java-Docs. Gut, fangen wir an mit einzeiligen Kommentaren. Einzeilige Kommentare werden mit zwei Slash eingeleitet.

Jetzt kann ich hier so was hinschreiben, wie ich wollte zwei Zahlen addieren, zwei Zahlen addieren und diese auf der Konsole ausgeben und diese auf der Konsole ausgeben. So, das ist ja jetzt ein Kommentar. Wenn ich jetzt in die nächste Zeile gehe, sehe ich auch, das ist farblich jetzt anders. Die die Kommentare wären farblich eben entsprechend abgesetzt, dass ich weiß, okay, das wird vom Compiler ignoriert. Das ist ein Kommentar. So, das ist die erste Art von Kommentar. Dann gibt es sogenannte Blog-Kommentare, die jetzt über mehrere Zeilen gehen.

Die werden mit einem Slash-Sternchen eingeführt und bei diesem Slash-Sternchen sieht man schon direkt, dass alles danach grün wird. Das heißt, er denkt, jetzt wird das alles ein Kommentar sein. So, jetzt könnte ich sagen, das ist ein Kommentar über mehrere Zeilen. Der Vollständigkeit halber sollte mal neue Zeilen immer mit einem Sternchen beginnen lassen, einfach damit man sieht, dass das Teil des Kommentars ist. Das kann ich jetzt über mehrere Zeilen machen, also noch eine Zeile und hier noch mehr. Und erst, wenn ich diesen Kommentarblock wieder schließe, nämlich mit einem Sternchen Slash wird danach oder wird dieser Kommentar geschlossen und wie man sieht, danach ist alles wieder ganz normal in dem Sintax-Highlighting, wie der normale Code ist.



Grundlagen der Programmierung - Javadoc

Herzlich willkommen zum Video zum Thema Java-Doc.

Teil 1. Motivation des Videos ist, was ist Java-Doc? Wir haben es ja eben schon mal oder im vorigen Video schon mal kurz angestitten. Die Frage ist die zweite Frage, wann und wie setze ich Java-Doc ein?

Kurzes Recap. Wir haben drei Arten von Kommentaren in Java. Aber diese einzheiligen Kommentare mit den Doppelslash, dann die Blog-Kommentare, die mit Slash Stern eingeleitet werden. Und dann haben wir die sogenannten Dokumentations-Kommentare, die mit Slash-Doppelstern eingeleitet werden.

Und die wollen wir uns auch heute genauer anschauen. Was ist eigentlich Java-Doc? Java-Doc ist ein Bestandteil des Java-Development-Kids, das ist JDK.

Und es ist ein Werkzeug zum Generieren von Dokumentationen. Und zwar schreibt man Java-Doc direkt in den Quellcode rein. Also die Java-Dokumentation macht man direkt im Quellcode, zum Beispiel direkt vor einer Methode, passend zur Methode. Und Java-Doc geht dann hin und passt den Quellcode und erstellt auf Basis dieser Dokumentations-Kommentare, die in diesen doppelten Sternchen sind, diese hier, eine Dokumentation als HTML-Datei.

Und dann kann ich quasi dadurch navigieren, durch Klassen, durch Methoden und so weiter und sofort und kann sehen, okay, wie ist denn mein Code beschrieben. Um das Ganze umzusetzen, werden im Rahmen von Java-Doc sogenannte Tags genutzt, die mit einem Add-Zeichen eingeleitet werden. Wir werden gleich noch kennenlernen. Fokus heute ist Java-Doc für Methoden, wie wir diese hier, wie wir für Methoden einen Dokumentations-Kommentar schreiben können. Und schön ist oder ein Vorteil, wie gesagt, habe ich auch gerade schon gesagt, dass man die Dokumentations-Kommentare innerhalb des Quelltexts, also des Quellcodes, angibt. Da habe ich jetzt kein extra Dokument, das ich bearbeite, sondern das wird immer in den Code mit reingeschrieben. Steht dann auch direkt an der Methode oder je nachdem, was ich dokumentieren möchte und ist dementsprechend weniger mühselig und fehlerrechtig. Man würde aber auch sehen, wenn man jetzt zum Beispiel Methoden schreibt und man soll dann ein Dokumentations-Kommentar dazu schreiben, dann stöhnen erst mal viele auf, weil es schon immer ein bisschen Arbeit ist, aber es lohnt sich.

Gut, wie gesagt, Fokus ist mit Java-Doc, also Dokumentations-Kommentare für Methoden in diesem Video anzuschauen. So, und dafür haben wir hier zwei ganz wesentliche Tags. Es gibt noch viele andere Tags, aber das sind die jetzt in diesem Teil 1, die uns interessieren für die Methoden. Und zwar haben wir den sogenannten Add ParamTag, das ist die Parameter-Beschreibung einer Methode, dahinter kommt eine Beschreibung und dann haben wir einen sogenannten Add Return Tag, auch hier kommt eine Beschreibung und dieser beschreibt den Rückgabewert einer Methode. So, hier unten ist mal ein Beispiel dafür für einen sogenannten Dokumentations-Kommentar.

Er beginnt, wie gesagt, mit zwei Sternen, ist mal ganz wichtig. Dann haben wir hier eine kurze Beschreibung, calculates the area of a circle based on a given radius and returns it, also eine kurze Beschreibung, was die nachfolgende Methode macht, die danach kommt. Vielleicht erinnert sich da ein oder die anderen noch daran, dass wir diese Flächenberechnung gemacht haben. Die Methode hat einen Parameter, das sagt dieser Add ParamTag, dieser Parameter hat den Namen radius und hier ist die kurze Beschreibung, das ist der radius des Kreises. Und dann hat diese Methode einen Return Wert und das kann immer nur genau einen geben, also ein Add Return und das ist die Fläche des Kreises. So, das ist hier nochmal kurz zusammengefasst, wie dokumentiere ich Methoden, also wichtig ist, als allererstes direkt nach diesen zwei einleitenden Sternchen, kurzer ganz Ersatz, der beschreibt, was die Methode macht, nicht das wie, sondern das was. Hier muss man auch nicht schreiben, die Methode macht x, y, z, sondern es reicht, berechnet den Umfang oder addiert zwei Werte und so weiter und so fort. Dann, zweitens, für jeden Parameter in dieser, in der Parameter Liste, also quasi in diesen runden Klammern, wird genau ein Param, Add ParamTag in diesen Dokumentationskommentar aufgenommen. Hier ist ganz wichtig, dass man den Namen des Parameters mit aufnimmt, ja, also wenn es heißt zum Beispiel int a, dann wäre es add Param a und danach kommt eine kurze Beschreibung. Bei Methoden, die einen Rückgabewert haben, wir erinnern uns, es gibt Methoden mit Rückgabewert, wo dann sowas wie int Boolean string steht und es gibt Methoden ohne Rückgabewert.

Wenn sie aber einen Rückgabewert haben, dann brauchen wir einen Add Return Tag und wir brauchen nur ganz genau einen, es kann nicht mehrere Add Return Tags geben, sondern maximal einen. JavaDoc wird, wie gesagt, generiert, ist daher auch sehr interessant. Für uns ist es so, wenn wir Software entwickeln und viele Methoden schreiben, dann wollen wir zum Beispiel, wenn wir Methoden aufrufen, wollen wir die sofort verstehen und dafür gibt es eben JavaDoc. Java selbst stellt viele Komponenten bereit, die mithilfe von JavaDoc kommentiert sind, kann man beispielsweise mal unter diesem Link finden und hier rechts in der IDE sieht man das mal, wir hatten das in dem Bereich, wo wir Strings vergleichen mit dieser Methode equals und wenn man da mal drüber mauscht in einer Entwicklungsumgebung, die nutzen wir ja jetzt später, wenn die Objektorientierung kommt, dann sieht man beispielsweise, wie sieht das Ganze aus?

Also was habe ich hier, sind zum Beispiel meine Parameter, die Params, hier ist der Return Wert, genau und hier gibt es noch andere Dinge, die beschrieben werden, aber ich sehe dann genau, was macht die Methode hier oben auch eben nochmal die kurze Beschreibung, um zu wissen, wie gehe ich mit dieser Methode oder wie kann ich die einsetzen? Genau, JavaDoc wird uns beim Behandeln neuer Themen weiterhin begleiten, wir werden mit JavaDoc noch Klassen dokumentieren, wir werden auch die Text noch ein bisschen erweitern, ist ganz wichtig, dass sie sich das anschauen und dass sie JavaDoc entsprechend einsetzen können. Dann können wir später auch eigene Dokumentationen, also sogenannte HTML-Dateien erstellen und das ganz automatisiert, ohne dass man extra etwas dokumentieren muss. Und jetzt gibt es eine kleine Demo dazu.

So, ich habe jetzt hier wieder mein Beispiel im VPL, wir hatten das ja eben oder im vorigen Video haben wir hier diese zwei verschiedenen Kommentare, den Zeilenkommentar, den Blogkommentar eingefügt zu. Was wir jetzt ja machen wollen, ist, dass wir ein Dokumentationskommentar schreiben, und zwar für diese Methode. Das geht nun wie folgt. Wir leiten ein, das Dokumentationskommentar mit zwei Sternen. Wenn ich jetzt enter drücke, kommt ja automatisch ein Stern und die erste Regel war für das Dokumentationskommentar eine kurze Beschreibung, was die Methode macht. Und hier wäre es addiert zwei Eingabe-Werte und gibt die Summe zurück.

So, über sich zuhause mache ich jetzt hier mal noch eine Lehrzeile hin. Jetzt haben wir hier zwei Parametern, zwar a und b. Dem entsprechend brauche ich auch zwei Parameter-Tex, add param a, das wäre jetzt der erste, so mann nenne ich ihn jetzt mal und ich habe add param b, zweiter Summand. Darüber hinaus sehe ich, dass meine Methode hier ein Rückgabewert hat, das heißt, sie bekommt auch einen Return-Tag und das ist die Summe aus a und b. So, damit ist mein Dokumentationskommentar schon fertig, ich kann das Ganze schließen. So, und dann sehe ich auch direkt, mein Dokumentationskommentar ist geschlossen und muss auch direkt an der Methode dran stehen, also es gehört nicht in die Methode rein oder es gehört nicht hinter die Methode, sondern es gehört genau vor die Methode. Jetzt vielleicht noch mal als Alternative, wenn jetzt zum Beispiel das Ganze keine, wenn das beispielsweise hier keine Parameter hätte, dann hätte ich hier auch keine add param text, also es muss sich genau hier widerspiegeln, wie viele Parameter, dementsprechend habe ich hier diese, auch die gleiche Anzahl von Text und der Name der Parameter ist auch wichtig. Gut, das zum Thema Dokumentationskommentare.